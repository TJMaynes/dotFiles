#!/bin/bash

function install-linux-package()
{
  if ! dpkg -l | grep -q "$1"; then
    echo "Installing package '$1'..."
    sudo apt-get install -y "$1"
  fi
}

function install-macos-package()
{
  if [[ -z "$(command -v brew)" ]]; then
    echo "Homebrew is not installed!"
  else
    if ! brew list --formula -1 | grep -q "^$1\$"; then
      echo "Installing package '$1'..."
      brew install $1
    fi
  fi
}

function install_package()
{
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    install-linux-package $1
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    install-macos-package $1
  else
    echo "Operating system not supported!"
  fi
}

function remove-and-create-directory() {
  rm -rf $1 && mkdir -p $1 || true
}

function install-binary-from-url() {
  TOOL_NAME=$1; TOOL_URL=$2; TOOL_DESTINATION=$HOME/workspace/bin/$TOOL_NAME

  if [[ -z "$(command -v $TOOL_NAME)" ]]; then
    echo "Installing $TOOL_NAME via $TOOL_URL..."

    remove-and-create-directory $TOOL_DESTINATION

    curl -Lo $TOOL_DESTINATION/$TOOL_NAME $TOOL_URL

    chmod +x $TOOL_DESTINATION/$TOOL_NAME

    ensure_line_exists_in_shells "export PATH=\$PATH:\$HOME/workspace/bin/$TOOL_NAME"
  fi
}

function install-tar-from-url() {
  TOOL_NAME=$1; TOOL_URL=$2; TOOL_DESTINATION=$HOME/workspace/bin

  if [[ -z "$(command -v $TOOL_NAME)" ]]; then
    echo "Installing $TOOL_NAME via $TOOL_URL..."

    remove-and-create-directory $TOOL_NAME-temp

    pushd $TOOL_NAME-temp
    curl -sL $TOOL_URL | tar xvz
    chmod +x $TOOL_NAME
    popd

    (mkdir -p $TOOL_DESTINATION || true) && mv $TOOL_NAME-temp $TOOL_DESTINATION/$TOOL_NAME

    ensure_line_exists_in_shells "export PATH=\$HOME/workspace/bin/$TOOL_NAME:\$PATH"
  fi
}

function check-program-installed() 
{
  if [[ ! -x "$(command -v $1)" ]]; then
    install-package $1
  fi
}

function pclone()
{
  if [[ -n "$1" ]]; then
    clone tjmaynes/$1
  fi
}

function clone()
{
  REPOSITORY=$1
  if [[ -z $REPOSITORY ]]; then
    echo "Please provide a repository name!";
  else
    git clone git@github.com:$REPOSITORY $WORKSPACE_DIRECTORY/$REPOSITORY
    cd $WORKSPACE_DIRECTORY/$REPOSITORY
  fi
}

function install-ruby-gem() {
  GEM_NAME=$1 GEM_CLI_NAME=$2

  if [[ -z "$(command -v $GEM_CLI_NAME)" ]]; then
    gem install $GEM_NAME --no-document
  fi
}

# Originally found here: https://stackoverflow.com/a/32592965
function kill-process-on-port() {
  PORT=$1
  if [[ -z $PORT ]]; then
    echo "Please provide a PORT to kill process from"
  else
    kill -9 $(lsof -t -i:$PORT)
  fi
}

function backup-github-repos()
{
  REPOS=$(curl -s "https://api.github.com/users/$GIT_USERNAME/repos" | python -c "import json, sys; obj=json.load(sys.stdin); lst=[str(obj[i]['name']) for i in range(len(obj))]; print ', '.join(str(p) for p in lst)")
  REPOS=($(echo $REPOS | tr "," "\n"))

  (mkdir -p $WORKSPACE_DIRECTORY || true) && pushd $WORKSPACE_DIRECTORY
  for repo in "${REPOS[@]}"; do
    echo "Backing up $repo repo to $WORKSPACE_DIRECTORY/$repo"
    git clone https://github.com/$GIT_USERNAME/$repo.git $repo
    tar -czf $repo.tar.gz $repo
    rm -rf $repo
  done
  popd
}

function get-ip-address()
{
  if [[ -z "$(command -v hostname)" ]]; then
    echo "Hostname is not installed on machine"
  else
    hostname -I | awk '{print $1}'
  fi
}

function start-ssh-agent()
{
  eval $(ssh-agent -s) && ssh-add $HOME/.ssh/id_rsa
}

function docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

function docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

function initialize-tool() {
  TOOL=$1;
  if [[ -d "$HOME/.$TOOL" ]]; then
    eval "$($TOOL init -)"
  fi
}

function install-runtime() {
  VERSION_MANAGER=$1; VERSION=$2

  if [[ "$VERSION_MANAGER" == "rbenv"  ]] && [[ "$OSTYPE" == "darwin"* ]]; then
    export HOMEBREW_ROOT=/opt/homebrew/opt
    export RBENV_ROOT=$HOMEBREW_ROOT/rbenv
    export PATH=$RBENV_ROOT/bin:$PATH

    export PATH="$HOMEBREW_ROOT/openssl@1.1/bin:$PATH"
    export LDFLAGS="-L$HOMEBREW_ROOT/openssl@1.1/lib"
    export CPPFLAGS="-I$HOMEBREW_ROOT/openssl@1.1/include"
    export PKG_CONFIG_PATH="$HOMEBREW_ROOT/openssl@1.1/lib/pkgconfig"
    export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$HOMEBREW_ROOT/openssl@1.1"

    export RUBY_CFLAGS="-Wno-error=implicit-function-declaration"
  fi

  if [[ -z "$(command -v $VERSION_MANAGER)" ]]; then
    echo "'$VERSION_MANAGER' is not installed!"
  elif ! $VERSION_MANAGER versions --bare | grep -q "^$VERSION\$"; then
    echo "Installing $VERSION_MANAGER version: $VERSION..."
    $VERSION_MANAGER install $VERSION
  fi

  if [[ ! -z "$(command -v $VERSION_MANAGER)" ]]; then
    $VERSION_MANAGER global $VERSION
  fi
}

function install-node-package() {
  NPM_PACKAGE_NAME=$1; NPM_PACKAGE=$2

  if [[ ! -z "$(command -v $NPM_PACKAGE)" && ! -z "$(command -v npm)" ]]; then
    echo "Installing Node package: $NPM_PACKAGE_NAME..."
    npm install --global $NPM_PACKAGE_NAME
  fi
}

function install-python-package() {
  PYTHON_PACKAGE=$1; AS_USER=$2

  USER_PARAMETER="--user"
  if [[ -z "$AS_USER" ]]; then
    USER_PARAMETER=""
  fi

  if [[ -z "$(command -v python3 -m $PYTHON_PACKAGE)" && ! -z "$(command -v python3)" && ! -z "$(command -v pip)" ]]; then
    echo "Installing Python package: $PYTHON_PACKAGE..."
    python3 -m pip install --upgrade $USER_PARAMETER $PYTHON_PACKAGE
  fi
}

function install-jvm-package() {
  PACKAGE=$1; PACKAGE_ALIAS=$2; VERSION=$3
  if [[ -z "$(command -v $PACKAGE_ALIAS)" && ! -z "$(command -v sdk)" ]]; then
    echo "Installing JVM package: $PACKGE..." 
    sdk install $PACKAGE $VERSION || true
  fi
}

function setup-git() {
  git config --global user.name "$USER_GIT_NAME"
  git config --global user.email "$USER_EMAIL"

  git config --global diff.tool vimdiff
  git config --global difftool.prompt false
  git config --global merge.tool vimdiff
  git config --global mergetool.prompt false

  git config --global alias.co 'checkout'
  git config --global alias.st 'status'
  git config --global alias.conflicts 'ls-files --unmerged | cut -f2 | sort -u'
  git config --global alias.ditch 'reset --hard'
  git config --global alias.ditchall 'reset --hard && git clean -fd'
  git config --global alias.d difftool
  git config --global alias.diffc 'diff --cached'
  git config --global alias.smp 'submodule foreach git pull origin master'
  git config --global alias.sgc 'og --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %C(cyan)(%cr) %C(blue)<%an>%Creset" --abbrev-commit --date=relative'
  git config --global alias.patience 'merge --strategy-option=patience'
  git config --global alias.aliases 'config --get-regexp alias'
  git config --global alias.pushf 'push --force-with-lease'
  git config --global alias.initp 'init && echo ".DS_Store" > .gitignore && touch RE ADME.md'

  git config --global gpg.program gpg2
  #git config --global commit.gpgsign true

  git config --global init.defaultBranch main
}

function setup-gpg() {
  if [[ ! -f $HOME/.gnupg/gpg-agent.conf ]]; then
    (mkdir -p "$HOME/.gnupg" || true) && cat <<EOF | tee -a "$HOME/.gnupg/gpg-agent.conf"
pinentry-program $(command -v pinentry)
default-cache-ttl 25200
max-cache-ttl 43200
EOF
  fi

  chown -R "$(whoami)" "$HOME/.gnupg/"
  find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
  find "$HOME/.gnupg" -type d -exec chmod 700 {} \;
}

function setup-secrets() {
  [[ -f "$HOME/.bash_secrets" ]] && source $HOME/.bash_secrets
}

function setup-exports() {
  export LANG=en_US.UTF-8
  export EDITOR=vi
  export PATH=/usr/local/bin:$PATH
  export GPG_TTY=$(tty)

  export WORKSPACE_DIRECTORY=$HOME/workspace
  export GIT_USERNAME=tjmaynes

  if [ $TERM = 'dumb' ]; then
    export PS1="\n\w\n\u $"
  else
    export TERM="xterm-256color"
  fi

  if [[ "$OSTYPE" == "darwin"* ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
  fi
}

function setup-aliases() {
  alias psx='ps -x'
  alias create-ssh-key='ssh-keygen -t rsa -b 4096 -C'
  alias gen-pass='openssl rand -base64 25 | tr -d /'
  alias port-usage='sudo lsof -i -P -n | grep LISTEN'
  alias k='kubectl'
  alias kgp='k get pods'
  alias kgd='k get deployments'

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'

    alias running-services='systemctl list-units  --type=service  --state=running'
  fi
}

function setup-jvm() {
  export SDKMAN_DIR="$HOME/.sdkman"
  [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

  export JAVA_VERSION=16.0.0-zulu
  install-jvm-package java java $JAVA_VERSION

  export KOTLIN_VERSION=1.4.31
  install-jvm-package kotlin kotlinc $KOTLIN_VERSION
}

function setup-ruby() {
  initialize-tool "rbenv"

  export RUBY_VERSION=2.7.1
  install-runtime rbenv $RUBY_VERSION

  install-ruby-gem "xcode-install" "xcversion"
}

function setup-node() {
  export PATH="$HOME/.nodenv/bin:$PATH"
  export PATH="$HOME/.nodenv/shims:$PATH"

  export NODE_VERSION=15.14.0
  install-runtime nodenv $NODE_VERSION

  install-node-package yarn yarn
  install-node-package create-react-app create-react-app
}

function setup-python() {
  export PATH="$HOME/.pyenv/bin:$PATH"
  export PATH="$HOME/.pyenv/shims:$PATH"
  initialize-tool "pyenv"

  export PYTHON_VERSION=3.9.1
  export PYTHON_CONFIGURE_OPTS="--enable-shared"
  install-runtime pyenv $PYTHON_VERSION

  install-python-package pip true
  install-python-package cookiecutter true
}

function setup-runtimes() {
  setup-jvm
  setup-ruby
  setup-node
  setup-python
}

function main() {
  export USER_GIT_NAME="TJ Maynes (Personal)"
  export USER_EMAIL="tj@tjmaynes.com"

  setup-git
  setup-secrets
  setup-exports
  setup-aliases
  setup-runtimes
}

main
