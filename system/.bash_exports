#!/bin/bash

export LANG=en_US.UTF-8
export EDITOR=vi

if [ $TERM = 'dumb' ]; then
  export PS1="\n\w\n\u $ "
else
  export TERM="xterm-256color"
  export PS1="\n\u in \w\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')\n=> \[$(tput sgr0)\]"
fi

export PATH=/usr/local/bin:$PATH
export WORKSPACE_DIRECTORY=$HOME/workspace

# Golang

export GO111MODULE=on
export GOPATH=$HOME/workspace/go
export GOBIN=$HOME/workspace/go/bin
export PATH=$GOBIN:$PATH
export PATH=/usr/local/go/bin:$PATH

# Pyenv

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# NVM

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# GPG

export GPG_TTY=$(tty)

############################################
#############   Kubernetes   ###############
############################################

alias k='kubectl'
alias kgp='kubectl get pods'
alias kgd='kubectl get deployments'
alias k8s_start_proxy='kubectl proxy'

k8s_create_dashboard()
{
  KUBERNETES_DASHBOARD_VERSION="v2.0.0-beta8" 
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/$KUBERNETES_DASHBOARD_VERSION/aio/deploy/recommended.yaml
}

k8s_set_token()
{
  KUBERNETES_NAMESPACE=$1
  [[ -z $KUBERNETES_NAMESPACE ]]; KUBERNETES_NAMESPACE="kube-system"

  KUBERNETES_CONTEXT=$2
  [[ -z $KUBERNETES_CONTEXT ]]; KUBERNETES_CONTEXT="docker-desktop"

  KUBERNETES_TOKEN=$(kubectl -n $KUBERNETES_NAMESPACE get secrets -o jsonpath='{.items[0].data.token}') 
  kubectl -n $KUBERNETES_NAMESPACE config set-credentials $KUBERNETES_CONTEXT --token="${KUBERNETES_TOKEN}"

  echo "$KUBERNETES_TOKEN"
}

############################################
#############    Aliases   #################
############################################

alias psx='ps -x'
alias awake='caffeinate'
alias xcode-delete-derived-data='rm -rf ~/Library/Developer/Xcode/DerivedData'
alias gen-pass='openssl rand -base64 25 | tr -d /'
alias port-usage='sudo lsof -i -P -n | grep LISTEN'
alias init-git='git init && echo ".DS_Store" > .gitignore && touch README.markdown'
alias uuid='uuidgen'
alias gpg-force-restart='gpgconf --kill gpg-agent'
alias check-disk-space='du -shxc /*'
alias start-docker='systemctl enable --now docker'
alias stop-docker='systemctl disable docker'
alias switch-to-zsh='chsh -s $(grep /zsh$ /etc/shells | tail -1)'
alias workie='cd $HOME/workspace/tjmaynes'

clone()
{
  git clone git@github.com:$1 $WORKSPACE_DIRECTORY/$1
  cd $WORKSPACE_DIRECTORY/$1
}

start-ssh-agent()
{
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_rsa
}

docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

generate_test_ssl_cert()
{
  generate-ssl-cert test "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com"
}

generate-ssl-cert()
{
  openssl genrsa -des3 -passout pass:x -out $1.pass.key 2048
  openssl rsa -passin pass:x -in $1.pass.key -out $1.key
  rm $1.pass.key
  openssl req -nodes -newkey rsa:2048 -keyout $1.key -out $1.csr -subj $2
  openssl x509 -req -sha256 -days 365 -in $1.csr -signkey $1.key -out $1.crt
}

if [[ -f "$HOME/.bash_secrets" ]]; then
  source $HOME/.bash_secrets
fi

