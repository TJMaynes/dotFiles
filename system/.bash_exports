#!/bin/sh

export LANG=en_US.UTF-8
export EDITOR=vi

if [ $TERM = 'dumb' ]; then
  export PS1="\n\w\n\u $ "
else
  export TERM="xterm-256color"
  export PS1="\n\u in \w\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')\n=> \[$(tput sgr0)\]"
fi

export PATH=/usr/local/bin:$PATH

# GPG
export GPG_TTY=$(tty)

# Golang setup
export GOPATH=$HOME/workspace/code/go
export GOBIN=$HOME/workspace/code/go/bin
export PATH=$GOBIN:$PATH
export PATH=/usr/local/go/bin:$PATH

# NodeJS setup
export NVM_DIR="$HOME/.nvm"
[[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
[[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion" 

# JVM-based setup
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && \. "$SDKMAN_DIR/bin/sdkman-init.sh"


# Pyenv
if [[ -x "$(command -v pyenv)" ]]; then
  eval $(pyenv init -)
fi


############################################
#############   Kubernetes   ###############
############################################

if [[ -x "$(command -v kubectl)" ]]; then
  source <(kubectl completion zsh)
fi

alias k8s_start_proxy='kubectl proxy'

k8s_create_dashboard()
{
  KUBERNETES_DASHBOARD_VERSION="v2.0.0-beta8" 

  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/$KUBERNETES_DASHBOARD_VERSION/aio/deploy/recommended.yaml
}

k8s_set_token()
{
  KUBERNETES_NAMESPACE=$1
  [[ -z $KUBERNETES_NAMESPACE ]]; KUBERNETES_NAMESPACE="kube-system"

  KUBERNETES_CONTEXT=$2
  [[ -z $KUBERNETES_CONTEXT ]]; KUBERNETES_CONTEXT="docker-desktop"

  KUBERNETES_TOKEN=$(kubectl -n $KUBERNETES_NAMESPACE get secrets -o jsonpath='{.items[0].data.token}') 
  kubectl -n $KUBERNETES_NAMESPACE config set-credentials $KUBERNETES_CONTEXT --token="${KUBERNETES_TOKEN}"
  
  echo "$KUBERNETES_TOKEN"
}

############################################
#############    Aliases   #################
############################################

alias psx='ps -x'
alias awake='caffeinate'
alias xcode-delete-derived-data='rm -rf ~/Library/Developer/Xcode/DerivedData'
alias gen-pass='openssl rand -base64 25 | tr -d /'
alias port-usage='sudo lsof -i -P -n | grep LISTEN'
alias init-git='git init && echo ".DS_Store" > .gitignore && touch README.markdown'
alias uuid='uuidgen'
alias gocode='cd $GOPATH/src/github.com/tjmaynes'
alias gpg-force-restart='gpgconf --kill gpg-agent'
alias check-disk-space='du -shxc /*'
alias start-docker='systemctl enable --now docker'
alias stop-docker='systemctl disable docker'
alias switch_to_zsh='chsh -s $(grep /zsh$ /etc/shells | tail -1)'
alias workie='cd $HOME/workspace/tjmaynes'
alias code='code --user-data-dir=$HOME/.vscode'

gpg-easy-encrypt()
{
  gpg \
    --output $1.gpg \
    --encrypt --recipient $2 $1 
}

docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

generate_test_ssl_cert()
{
  generate_ssl_cert test "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com"
}

generate_ssl_cert()
{
  openssl genrsa -des3 -passout pass:x -out $1.pass.key 2048
  openssl rsa -passin pass:x -in $1.pass.key -out $1.key
  rm $1.pass.key
  openssl req -nodes -newkey rsa:2048 -keyout $1.key -out $1.csr -subj $2
  openssl x509 -req -sha256 -days 365 -in $1.csr -signkey $1.key -out $1.crt
}

convert_to_gif()
{
  ffmpeg -i $1 -s $2 -pix_fmt rgb8 -r 25 -f gif - | gifsicle --optimize=3 --delay=3 > screencast_`date +"%Y.%m.%d-%H.%M"`.gif
}

get_public_key()
{
  gpg --armor --export $1 | pbcopy  
}

[[ ! -f $HOME/.bash_secrets ]]; source $HOME/.bash_secrets
