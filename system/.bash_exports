#!/bin/bash

if [[ -f "$HOME/.bash_secrets" ]]; then
  source $HOME/.bash_secrets
fi

############################################
##############   Exports   #################
############################################

export LANG=en_US.UTF-8
export EDITOR=vi
export PATH=/usr/local/bin:$PATH
export WORKSPACE_DIRECTORY=$HOME/workspace
export GIT_USERNAME=tjmaynes

if [ $TERM = 'dumb' ]; then
  export PS1="\n\w\n\u $ "
else
  export TERM="xterm-256color"
  export PS1="\n\u in \w\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')\n=> \[$(tput sgr0)\]"
fi

# Pyenv

export PYTHON_VERSION=3.8.0
export PYTHON_CONFIGURE_OPTS="--enable-shared"
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# Rbenv

export RUBY_VERSION=2.6.6
export RBENV_ROOT="$HOME/.rbenv"
export PATH="$RBENV_ROOT/bin:$PATH"
if command -v rbenv 1>/dev/null 2>&1; then
  eval "$(rbenv init -)"
fi

# GPG

export GPG_TTY=$(tty)

############################################
#############    Aliases   #################
############################################

alias psx='ps -x'
alias create-ssh-key='ssh-keygen -t rsa -b 4096 -C'
alias gen-pass='openssl rand -base64 25 | tr -d /'
alias port-usage='sudo lsof -i -P -n | grep LISTEN'

get-ip-address()
{
  if [[ -z "$(command -v hostname)" ]]; then
    echo "Hostname is not installed on machine"
  else
    hostname -I | awk '{print $1}'
  fi
}

start-ssh-agent()
{
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_rsa
}

############################################
##########  Docker / Kubernetes   ##########
############################################

alias k='kubectl'
alias kgp='kubectl get pods'
alias kgd='kubectl get deployments'
alias k8s_start_proxy='kubectl proxy'

k8s_create_dashboard()
{
  KUBERNETES_DASHBOARD_VERSION="v2.0.0-beta8" 
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/$KUBERNETES_DASHBOARD_VERSION/aio/deploy/recommended.yaml
}

k8s_set_token()
{
  KUBERNETES_NAMESPACE=$1
  [[ -z $KUBERNETES_NAMESPACE ]]; KUBERNETES_NAMESPACE="kube-system"

  KUBERNETES_CONTEXT=$2
  [[ -z $KUBERNETES_CONTEXT ]]; KUBERNETES_CONTEXT="docker-desktop"

  KUBERNETES_TOKEN=$(kubectl -n $KUBERNETES_NAMESPACE get secrets -o jsonpath='{.items[0].data.token}') 
  kubectl -n $KUBERNETES_NAMESPACE config set-credentials $KUBERNETES_CONTEXT --token="${KUBERNETES_TOKEN}"

  echo "$KUBERNETES_TOKEN"
}

docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

############################################
################   Other   #################
############################################

post-install()
{
  install_python_package()
  {
    if [[ -x "$(command -v $1)" ]]; then
      echo "$1 already installed..."
    else
      echo "Installing $1..."
      python3 -m pip install --upgrade $1 
    fi
  }

  install_python()
  {
    if [[ -x "$(command -v pyenv)" ]]; then
      echo "Pyenv is not installed!"
    else
      if pyenv versions --bare | grep -q "^$PYTHON_VERSION\$"; then
        echo "Python v$PYTHON_VERSION is already installed..."
      else
        pyenv install $PYTHON_VERSION
      fi

      pyenv global $PYTHON_VERSION

      if [[ -d "$HOME/.vim/plugged/YouCompleteMe" ]]; then
        echo "Installing YouCompleteMe..."
        pushd $HOME/.vim/plugged/YouCompleteMe
        python install.py
        popd
      fi

      install_python_package pip
      install_python_package cookiecutter
      install_python_package jupyter
    fi
  }

  install_ruby()
  {
    if [[ -x "$(command -v rbenv)" ]]; then
      echo "Rbenv is not installed!"
    else
      if rbenv versions --bare | grep -q "^$RUBY_VERSION\$"; then
        echo "Ruby v$RUBY_VERSION is already installed..."
      else
        rbenv install $RUBY_VERSION
      fi

      rbenv global $RUBY_VERSION
    fi
  }

  install_python
  install_ruby
}

pclone()
{
  clone tjmaynes/$1
}

clone()
{
  if [[ -z $1 ]]; then
    echo "Please provide a repository name!";
  else
    git clone git@github.com:$1 $WORKSPACE_DIRECTORY/$1
    cd $WORKSPACE_DIRECTORY/$1
  fi
}

backup-github-repos()
{
  REPOS=$(curl -s "https://api.github.com/users/$GIT_USERNAME/repos" | python -c "import json, sys; obj=json.load(sys.stdin); lst=[str(obj[i]['name']) for i in range(len(obj))]; print ', '.join(str(p) for p in lst)")
  REPOS=($(echo $REPOS | tr "," "\n"))

  (mkdir -p $WORKSPACE_DIRECTORY || true) && pushd $WORKSPACE_DIRECTORY
  for repo in "${REPOS[@]}"; do
    echo "Backing up $repo repo to $WORKSPACE_DIRECTORY/$repo"
    git clone https://github.com/$GIT_USERNAME/$repo.git $repo
    tar -czf $repo.tar.gz $repo
    rm -rf $repo
  done
  popd
}

