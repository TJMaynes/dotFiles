#!/bin/bash

if [[ -f "$HOME/.bash_secrets" ]]; then
  source $HOME/.bash_secrets
fi

############################################
##############   Exports   #################
############################################

export LANG=en_US.UTF-8
export EDITOR=vi
export PATH=/usr/local/bin:$PATH
export HOST="$(hostname -I | awk '{print $1}')"
export WORKSPACE_DIRECTORY=$HOME/workspace

if [ $TERM = 'dumb' ]; then
  export PS1="\n\w\n\u $ "
else
  export TERM="xterm-256color"
  export PS1="\n\u in \w\$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/')\n=> \[$(tput sgr0)\]"
fi

# Golang

export GO111MODULE=on
export GOPATH=$HOME/workspace/go
export GOBIN=$HOME/workspace/go/bin
export PATH=$GOBIN:$PATH
export PATH=/usr/local/go/bin:$PATH

# Pyenv

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# NVM

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# GPG

export GPG_TTY=$(tty)

############################################
#############    Aliases   #################
############################################

alias psx='ps -x'
alias create-ssh-key='ssh-keygen -t rsa -b 4096 -C'
alias gen-pass='openssl rand -base64 25 | tr -d /'
alias port-usage='sudo lsof -i -P -n | grep LISTEN'

############################################
#################   Git   ##################
############################################

alias git-init='git init && echo ".DS_Store" > .gitignore && touch README.md'

git-pclone()
{
	git-clone tjmaynes/$1
}

git-clone()
{
  git clone git@github.com:$1 $WORKSPACE_DIRECTORY/$1
  cd $WORKSPACE_DIRECTORY/$1
}

############################################
#############   Kubernetes   ###############
############################################

alias k='kubectl'
alias kgp='kubectl get pods'
alias kgd='kubectl get deployments'
alias k8s_start_proxy='kubectl proxy'

k8s_create_dashboard()
{
  KUBERNETES_DASHBOARD_VERSION="v2.0.0-beta8" 
  kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/$KUBERNETES_DASHBOARD_VERSION/aio/deploy/recommended.yaml
}

k8s_set_token()
{
  KUBERNETES_NAMESPACE=$1
  [[ -z $KUBERNETES_NAMESPACE ]]; KUBERNETES_NAMESPACE="kube-system"

  KUBERNETES_CONTEXT=$2
  [[ -z $KUBERNETES_CONTEXT ]]; KUBERNETES_CONTEXT="docker-desktop"

  KUBERNETES_TOKEN=$(kubectl -n $KUBERNETES_NAMESPACE get secrets -o jsonpath='{.items[0].data.token}') 
  kubectl -n $KUBERNETES_NAMESPACE config set-credentials $KUBERNETES_CONTEXT --token="${KUBERNETES_TOKEN}"

  echo "$KUBERNETES_TOKEN"
}

start-ssh-agent()
{
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_rsa
}

docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

