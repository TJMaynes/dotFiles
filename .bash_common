#!/bin/bash

install_linux_package()
{
  if ! dpkg -l | grep -q "$1"; then
    echo "Installing package '$1'..."
    sudo apt-get install -y "$1"
  fi
}

install_macos_package()
{
  if [[ -z "$(command -v brew)" ]]; then
    echo "Homebrew is not installed!"
  else
    if ! brew list --formula -1 | grep -q "^$1\$"; then
      echo "Installing package '$1'..."
      brew install $1
    fi
  fi
}

install_package()
{
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    install_linux_package $1
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    install_macos_package $1
  else
    echo "Operating system not supported!"
  fi
}

check-program-installed() 
{
  if [[ ! -x "$(command -v $1)" ]]; then
    install_package $1
  fi
}

pclone()
{
  REPOSITORY=$1
  if [[ -z $REPOSITORY ]]; then
    echo "Please provide a personal repository name!";
  else
    clone tjmaynes/$1
  fi
}

clone()
{
  REPOSITORY=$1
  if [[ -z $REPOSITORY ]]; then
    echo "Please provide a repository name!";
  else
    git clone git@github.com:$REPOSITORY $WORKSPACE_DIRECTORY/$REPOSITORY
    cd $WORKSPACE_DIRECTORY/$REPOSITORY
  fi
}

# Originally found here: https://stackoverflow.com/a/32592965
kill_process_on_port() {
  PORT=$1
  if [[ -z $PORT ]]; then
    echo "Please provide a PORT to kill process from"
  else
    kill -9 $(lsof -t -i:$PORT)
  fi
}

backup-github-repos()
{
  REPOS=$(curl -s "https://api.github.com/users/$GIT_USERNAME/repos" | python -c "import json, sys; obj=json.load(sys.stdin); lst=[str(obj[i]['name']) for i in range(len(obj))]; print ', '.join(str(p) for p in lst)")
  REPOS=($(echo $REPOS | tr "," "\n"))

  (mkdir -p $WORKSPACE_DIRECTORY || true) && pushd $WORKSPACE_DIRECTORY
  for repo in "${REPOS[@]}"; do
    echo "Backing up $repo repo to $WORKSPACE_DIRECTORY/$repo"
    git clone https://github.com/$GIT_USERNAME/$repo.git $repo
    tar -czf $repo.tar.gz $repo
    rm -rf $repo
  done
  popd
}

get-ip-address()
{
  if [[ -z "$(command -v hostname)" ]]; then
    echo "Hostname is not installed on machine"
  else
    hostname -I | awk '{print $1}'
  fi
}

start-ssh-agent()
{
  eval $(ssh-agent -s) && ssh-add $HOME/.ssh/id_rsa
}

docker-clean-all()
{
  docker stop $(docker container ls -a -q)
  docker system prune -a -f --all
  docker rm $(docker container ls -a -q)
}

docker-stop-and-remove-image()
{
  docker stop "$(docker ps | grep $1 | awk '{print $1}')"
  docker rm   "$(docker ps | grep $1 | awk '{print $1}')"
  docker rmi  "$(docker images | grep $1 | awk '{print $3}')" --force
}

initialize_tool() {
  TOOL=$1;
  if [[ ! -z "$(command -v $TOOL)" ]]; then
    eval "$($TOOL init -)"
  fi
}

install_runtime() {
  VERSION_MANAGER=$1; VERSION=$2

  if [[ -z "$(command -v $VERSION_MANAGER)" ]]; then
    echo "'$VERSION_MANAGER' is not installed!"
  elif ! $VERSION_MANAGER versions --bare | grep -q "^$VERSION\$"; then
    echo "Installing $VERSION_MANAGER version: $VERSION..."
    $VERSION_MANAGER install $VERSION
  fi

  if [[ ! -z "$(command -v $VERSION_MANAGER)" ]]; then
    $VERSION_MANAGER global $VERSION
  fi
}

install_node_package() {
  NPM_PACKAGE_NAME=$1;NPM_PACKAGE=$2
  if [[ ! -z "$(command -v $NPM_PACKAGE)" && ! -z "$(command -v npm)" ]]; then
    echo "Installing Node package: $NPM_PACKAGE_NAME..."
    npm install --global $NPM_PACKAGE_NAME
  fi
}

install_python_package() {
  PYTHON_PACKAGE=$1; AS_USER=$2

  USER_PARAMETER="--user"
  if [[ -z "$AS_USER" ]]; then
    USER_PARAMETER=""
  fi

  if [[ -z "$(command -v $PYTHON_PACKAGE)" && ! -z "$(command -v python3)" ]]; then
    echo "Installing Python package: $PYTHON_PACKAGE..."
    python3 -m pip install --upgrade $USER_PARAMETER $PYTHON_PACKAGE
  fi
}

install_jvm_package() {
  PACKAGE=$1; PACKAGE_ALIAS=$2; VERSION=$3
  if [[ -z "$(command -v $PACKAGE_ALIAS)" && ! -z "$(command -v sdk)" ]]; then
    echo "Installing JVM package: $1..." 
    sdk install $PACKAGE $VERSION || true
  fi
}
